<?php

namespace App\Http\Controllers;

use App\Http\Requests\PromotionRequest;
use App\Models\Promotion;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class PromotionController extends Controller
{
    public function index(Request $request)
    {
        $search = $request->input('search');
        $filter = $request->input('filter', 'all');

        $query = match ($filter) {
            '1' => Promotion::query(),
            '0' => Promotion::onlyTrashed(),
            default => Promotion::withTrashed(),
        };

        if ($search) {
            $query->where('code', 'like', '%' . $search . '%');
        }

        $promotions = $query->latest()->paginate(10);

        return view('admin.promotions.index', compact('promotions', 'search', 'filter'));
    }

    public function create()
    {
        if (Auth::user()->role === 'admin_branch') {
            return redirect()->route('promotions.index')->with('error', 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o m√£ gi·∫£m gi√°.');
        }

        return view('admin.promotions.create');
    }

    public function store(PromotionRequest $request)
    {
        if (Auth::user()->role === 'admin_branch') {
            return redirect()->route('promotions.index')->with('error', 'B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m m√£ gi·∫£m gi√°.');
        }

        $data = $request->validated();
        $data['is_active'] = 1;
        Promotion::create($data);

        return redirect()->route('promotions.index')->with('success', 'M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c t·∫°o.');
    }

    public function edit(Promotion $promotion)
    {
        if (Auth::user()->role === 'admin_branch') {
            return redirect()->route('promotions.index')->with('error', 'B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a m√£ gi·∫£m gi√°.');
        }

        return view('admin.promotions.edit', compact('promotion'));
    }

    public function update(PromotionRequest $request, Promotion $promotion)
    {
        if (Auth::user()->role === 'admin_branch') {
            return redirect()->route('promotions.index')->with('error', 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t m√£ gi·∫£m gi√°.');
        }

        $currentPage = $request->input('page', 1);
        $data = $request->validated();
        $data['is_active'] = $request->boolean('is_active', $promotion->is_active);


        $promotion->update($data);

        return redirect()->route('promotions.index', ['page' => $currentPage])->with('success', 'M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');
    }

    public function show($id)
    {
        if (Auth::user()->role === 'admin_branch') {
            return redirect()->route('promotions.index')->with('error', 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem chi ti·∫øt m√£ gi·∫£m gi√°.');
        }
        $promotion = Promotion::withTrashed()->findOrFail($id);
        return view('admin.promotions.show', compact('promotion'));
    }

    /**
     * X√≥a vƒ©nh vi·ªÖn m√£ gi·∫£m gi√° (ch·ªâ n·∫øu ƒë√£ soft delete tr∆∞·ªõc ƒë√≥)
     */
    public function destroy($id)
    {
        if (Auth::user()->role === 'admin_branch') {
            return response()->json([
                'success' => false,
                'message' => 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a m√£ gi·∫£m gi√°.'
            ]);
        }

        $promotion = Promotion::withTrashed()->findOrFail($id);

        // N·∫øu m√£ ch∆∞a b·ªã x√≥a m·ªÅm th√¨ kh√¥ng cho x√≥a c·ª©ng lu√¥n
        if (!$promotion->trashed()) {
            return response()->json([
                'success' => false,
                'message' => 'B·∫°n c·∫ßn x√≥a m·ªÅm tr∆∞·ªõc khi xo√° vƒ©nh vi·ªÖn.'
            ]);
        }

        try {
            $promotion->forceDelete();

            return response()->json([
                'success' => true,
                'message' => 'ƒê√£ xo√° vƒ©nh vi·ªÖn m√£ gi·∫£m gi√°.'
            ]);
        } catch (\Illuminate\Database\QueryException $e) {
            // Ki·ªÉm tra m√£ l·ªói SQL n·∫øu mu·ªën ch√≠nh x√°c h∆°n (1451 l√† "Cannot delete or update a parent row...")
            if ($e->getCode() == 23000) {
                return response()->json([
                    'success' => false,
                    'message' => 'M√£ gi·∫£m gi√° ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† kh√¥ng th·ªÉ x√≥a.'
                ]);
            }

            // Tr∆∞·ªùng h·ª£p l·ªói kh√°c
            return response()->json([
                'success' => false,
                'message' => 'ƒê√£ x·∫£y ra l·ªói khi x√≥a: ' . $e->getMessage()
            ]);
        }
    }

    /**
     * Xo√° m·ªÅm m√£ gi·∫£m gi√°
     */
    public function softDelete($id)
    {
        if (Auth::user()->role === 'admin_branch') {
            return response()->json([
                'success' => false,
                'message' => 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a m·ªÅm m√£ gi·∫£m gi√°.'
            ]);
        }

        $promotion = Promotion::findOrFail($id);

        // üëâ T·∫Øt k√≠ch ho·∫°t tr∆∞·ªõc khi x√≥a m·ªÅm
        $promotion->update(['is_active' => 0]);

        $promotion->delete();

        return response()->json([
            'success' => true,
            'message' => 'ƒê√£ x√≥a m·ªÅm m√£ gi·∫£m gi√°.'
        ]);
    }


    /**
     * Kh√¥i ph·ª•c m√£ gi·∫£m gi√° ƒë√£ b·ªã xo√° m·ªÅm
     */
    public function restore($id)
    {
        if (Auth::user()->role === 'admin_branch') {
            return response()->json([
                'success' => false,
                'message' => 'B·∫°n kh√¥ng c√≥ quy·ªÅn kh√¥i ph·ª•c m√£ gi·∫£m gi√°.'
            ]);
        }

        $promotion = Promotion::withTrashed()->findOrFail($id);
        $promotion->restore();
        $promotion->update(['is_active' => 1]);
        return response()->json([
            'success' => true,
            'message' => 'Kh√¥i ph·ª•c m√£ gi·∫£m gi√° th√†nh c√¥ng.'
        ]);
    }
}
